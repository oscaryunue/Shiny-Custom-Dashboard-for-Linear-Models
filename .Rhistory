runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
iris["Sepecies"]
iris["Species"]
iris["Species"]
iris["Species"]
code <- ifelse(d == target, 1, 0)
iris["Species"]
code <- ifelse(iris["Species"] == "Sentosa", 1, 0)
code
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
write.table(iris, file = "~/desktop/iris.csv", sep = ",")
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
framingham = read.csv("~/desktop/dataSets/framingham.csv")
str(framingham)
library(caTools)
# Randomly split the data into training and testing sets
set.seed(1000)
split = sample.split(framingham$TenYearCHD, SplitRatio = 0.65)
# Split up the data using subset
train = subset(framingham, split==TRUE)
test = subset(framingham, split==FALSE)
# Logistic Regression Model
framinghamLog = glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamLog)
# Predictions on the test set
predictTest = predict(framinghamLog, type="response", newdata=test)
# Confusion matrix with threshold of 0.5
table(test$TenYearCHD, predictTest > 0.5)
# Accuracy
(1069+11)/(1069+6+187+11)
# Baseline accuracy
(1069+6)/(1069+6+187+11)
# Test set AUC
library(ROCR)
ROCRpred = prediction(predictTest, test$TenYearCHD)
as.numeric(performance(ROCRpred, "auc")@y.values)
runApp('Desktop/MACHINE')
# Unit 3, Recitation
# Video 2
# Read in data
polling = read.csv("~/desktop/dataSets/PollingData.csv")
str(polling)
table(polling$Year)
summary(polling)
# Install and load mice package
#install.packages("mice")
library(mice)
# Multiple imputation
simple = polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
summary(imputed)
polling$Rasmussen = imputed$Rasmussen
polling$SurveyUSA = imputed$SurveyUSA
summary(polling)
# Video 3
# Subset data into training set and test set
Train = subset(polling, Year == 2004 | Year == 2008)
Test = subset(polling, Year == 2012)
# Smart Baseline
table(Train$Republican)
sign(20)
sign(-10)
sign(0)
table(sign(Train$Rasmussen))
table(Train$Republican, sign(Train$Rasmussen))
# Video 4
# Multicollinearity
cor(Train)
str(Train)
cor(Train[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount", "Republican")])
# Logistic Regression Model
mod1 = glm(Republican~PropR, data=Train, family="binomial")
summary(mod1)
# Training set predictions
pred1 = predict(mod1, type="response")
table(Train$Republican, pred1 >= 0.5)
# Two-variable model
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
pred2 = predict(mod2, type="response")
table(Train$Republican, pred2 >= 0.5)
summary(mod2)
# Video 5
# Smart baseline accuracy
table(Test$Republican, sign(Test$Rasmussen))
# Test set predictions
TestPrediction = predict(mod2, newdata=Test, type="response")
table(Test$Republican, TestPrediction >= 0.5)
# Analyze mistake
subset(Test, TestPrediction >= 0.5 & Republican == 0)
# Unit 3, Modeling the Expert
# Video 4
# Read in dataset
quality = read.csv("~/desktop/dataSets/quality.csv")
# Look at structure
str(quality)
# Table outcome
table(quality$PoorCare)
# Baseline accuracy
98/131
# Install and load caTools package
library(caTools)
# Randomly split data
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
split
# Create training and testing sets
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
# Logistic Regression Model
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
summary(QualityLog)
# Make predictions on training set
predictTrain = predict(QualityLog, type="response")
# Analyze predictions
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
factors(qualityTrain$PoorCare)
# Video 5
# Confusion matrix for threshold of 0.5
table(qualityTrain$PoorCare, predictTrain > 0.5)
# Sensitivity and specificity
10/25
70/74
# Confusion matrix for threshold of 0.7
table(qualityTrain$PoorCare, predictTrain > 0.7)
# Sensitivity and specificity
8/25
73/74
# Confusion matrix for threshold of 0.2
table(qualityTrain$PoorCare, predictTrain > 0.2)
# Sensitivity and specificity
16/25
54/74
# Video 6
# Install and load ROCR package
library(ROCR)
# Prediction function
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
# Performance function
ROCRperf = performance(ROCRpred, "tpr", "fpr")
# Plot ROC curve
plot(ROCRperf)
# Add colors
plot(ROCRperf, colorize=TRUE)
# Add threshold labels
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
shiny::runApp('Desktop/MACHINE')
type <- function(var){
fac <- sapply(iris, is.factor)
iris[ , fac]
}
var <- "Sepal.Width"
type(var)
names(Filter(is.factor, as.data.frame(iris) ))
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
if(is.factor(dependent)){
print("La variable independiente es un factor")
}
if(is.factor(dependent)){
print("La variable independiente es un factor")
}
esfactor <- function(var){
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
if(is.factor(dependent)){
print("La variable independiente es un factor")
}
}
esfactor(var)
esfactor <- function(var){
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
if(is.factor(dependent)){
dependent
}
}
esfactor(var)
dependent
esfactor <- function(var){
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
dependent
if(is.factor(iris[dependent])){
dependent
}
}
esfactor(var)
dependent[dependent]
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
dependent[dependent]
iris[dependent]
class(iris[dependent])
class(iris[dependent][1])
datasource <- iris
var <- datasource["Sepal.Width"]
type(var)
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
dependent
if(is.factor(datasource[dependent])){
dependent
}
dependent <- datasource["Sepal.Width"]
is.factor(datasource[dependent])
dependent <- datasource["Sepal.Width"]
dependent
is.factor(datasource[dependent])
is.factor(dependent)
dependent
is.factor(dependent[1])
dependent <- datasource["Sepal.Width"]
dependent
class(dependet)
class(dependent)
dependent <- datasource["Species"]
dependent
class(dependent)
is.factor(dependent[1])
is.factor, as.data.frame(datasource[dependent]) )
dependent <- "Species"
datasource[dependent]
is.factor(datasource[dependent])
apply(datasource,class)
apply(datasource,class)
sapply(datasource,class)
t <- sapply(datasource,class)
t[dependent]
class(l)
classtl)
class(t)
t[1]
t[,1]
t[1,]
t[2]
t["Species"]
class(t)
fac <- sapply(iris["Species"], is.factor)
fac
value(fac)
fac[1]
fac[,1]
fac ==T
fac == F
fac == T
fac <- sapply(iris["Species"], is.factor)
if(fac == T){print("Es Fector")}
fac <- sapply(datasource[dependent], is.factor)
dataType <- function(dependent) {
if(sapply(datasource[dependent], is.factor) == T){
print("Es factor")
}else if(sapply(datasource[dependent], is.logical)){
print("Es logico")
} else{
print("Es Numerico")
}
}
dataType(dependent)
dependent <- "Sepal.Width"
dataType(dependent)
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
facs <- names(Filter(is.factor, as.data.frame(iris) ))
facs
facs <- names(Filter(is.factor, as.data.frame(iris) ))
facs
logics <- names(Filter(is.numeric, as.data.frame(iris) ))
logics
select <- c(facs, logics)
select
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
ds <- read.csv(file = "~/desktop/dataSets/quality.csv", header = T, sep = ",")
head(ds)
str(ds)
na.omit(ds)
?contrasts()
contrasts(ds)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
head(dat)
ds <- read.csv(file = "~/desktop/dataSets/quality.csv", header = T, sep = ",")
head(ds)
str(ds)
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
str(ds)
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
ds <- read.csv(file = "~/desktop/dataSets/quality.csv", header = T, sep = ",")
head(ds)
str(ds)
na.omit(ds)
contrasts(ds)
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
# Convert all to numeric
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
head(dat)
str(dat)
getData <- function(data) {
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
getData <- function(data) {
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
}
# 2: Change
updateData <- function(data) { }
# 1: Get
getData <- function(data) {
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
}
# 2: Change
updateData <- function(data) {
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
}
# 3: Test
getData(ds)
updateData(da)
ds <- read.csv(file = "~/desktop/dataSets/quality.csv", header = T, sep = ",")
(str)
ls()
{}
)
getData <- function(data) {
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
}
updateData <- function(data) {
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
}
getData(ds)
updateData(da)
getData <- function(data) {
code <- ifelse(data == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
}
getData(ds)
ds <- read.csv(file = "~/desktop/dataSets/quality.csv", header = T, sep = ",")
head(ds)
str(ds)
na.omit(ds)
contrasts(ds)
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
data <- ds
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
head(dat)
data[,cols] <- lapply(data[,cols], as.numeric)
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
head(dat)
str(data)
data[,cols] <- lapply(data[,cols], as.numeric)
head(dat)
data <- ds
cols <- sapply(data, is.logical)
head(data)
data[,cols] <- lapply(data[,cols], as.numeric)
head(data)
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
head(data)
data <- ds
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
head(data)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
updateData <- function(data) {
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
}
updateData(data)
updateData <- function(data) {
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
data
}
updateData(data)
runApp('Desktop/MACHINE')
x <- getData(data)
x <- getData(data)
getData <- function(data) {
# code <- ifelse(data == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
}
x <- getData(data)
x
names(x)
names(x == T)
names([x] == T)
names(x[1] == T)
data <- ds
x <- getData(data)
names(x[1] == T)
runApp('Desktop/MACHINE')
getData <- function(data) {
# code <- ifelse(data == target, 1, 0)
apply(data,2,function(x) { all(na.omit(x) %in% 0:1) })
}
x <- getData(data)
names(x)
data <- ds
apply(data,2,function(x) { all(na.omit(x) %in% 0:1) })
head(data)
names(x)
x
names(x)
Filter(isTRUE, x)
colnames(Filter(isTRUE, x))
names(Filter(isTRUE, x))
getData <- function(data) {
x <- apply(data,2,function(x) { all(na.omit(x) %in% 0:1) })
names(Filter(isTRUE, x))
}
x <- getData(data)
x
updateData(data)
data <- ds
getBinary <- function(data) {
x <- apply(data,2,function(x) { all(na.omit(x) %in% 0:1) })
names(Filter(isTRUE, x))
}
getBinary(data)
updateData(data)
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
shiny::runApp('Desktop/MACHINE LM')
runApp('Desktop/MACHINE LM')
runApp('Desktop/MACHINE LM')
runApp('Desktop/MACHINE LM')
