print("La variable independiente es un factor")
}
if(is.factor(dependent)){
print("La variable independiente es un factor")
}
esfactor <- function(var){
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
if(is.factor(dependent)){
print("La variable independiente es un factor")
}
}
esfactor(var)
esfactor <- function(var){
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
if(is.factor(dependent)){
dependent
}
}
esfactor(var)
dependent
esfactor <- function(var){
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
dependent
if(is.factor(iris[dependent])){
dependent
}
}
esfactor(var)
dependent[dependent]
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
dependent[dependent]
iris[dependent]
class(iris[dependent])
class(iris[dependent][1])
datasource <- iris
var <- datasource["Sepal.Width"]
type(var)
dependent <-names(Filter(is.factor, as.data.frame(iris) ))
dependent
if(is.factor(datasource[dependent])){
dependent
}
dependent <- datasource["Sepal.Width"]
is.factor(datasource[dependent])
dependent <- datasource["Sepal.Width"]
dependent
is.factor(datasource[dependent])
is.factor(dependent)
dependent
is.factor(dependent[1])
dependent <- datasource["Sepal.Width"]
dependent
class(dependet)
class(dependent)
dependent <- datasource["Species"]
dependent
class(dependent)
is.factor(dependent[1])
is.factor, as.data.frame(datasource[dependent]) )
dependent <- "Species"
datasource[dependent]
is.factor(datasource[dependent])
apply(datasource,class)
apply(datasource,class)
sapply(datasource,class)
t <- sapply(datasource,class)
t[dependent]
class(l)
classtl)
class(t)
t[1]
t[,1]
t[1,]
t[2]
t["Species"]
class(t)
fac <- sapply(iris["Species"], is.factor)
fac
value(fac)
fac[1]
fac[,1]
fac ==T
fac == F
fac == T
fac <- sapply(iris["Species"], is.factor)
if(fac == T){print("Es Fector")}
fac <- sapply(datasource[dependent], is.factor)
dataType <- function(dependent) {
if(sapply(datasource[dependent], is.factor) == T){
print("Es factor")
}else if(sapply(datasource[dependent], is.logical)){
print("Es logico")
} else{
print("Es Numerico")
}
}
dataType(dependent)
dependent <- "Sepal.Width"
dataType(dependent)
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
facs <- names(Filter(is.factor, as.data.frame(iris) ))
facs
facs <- names(Filter(is.factor, as.data.frame(iris) ))
facs
logics <- names(Filter(is.numeric, as.data.frame(iris) ))
logics
select <- c(facs, logics)
select
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
ds <- read.csv(file = "~/desktop/dataSets/quality.csv", header = T, sep = ",")
head(ds)
str(ds)
na.omit(ds)
?contrasts()
contrasts(ds)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
head(dat)
ds <- read.csv(file = "~/desktop/dataSets/quality.csv", header = T, sep = ",")
head(ds)
str(ds)
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
str(ds)
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
ds <- read.csv(file = "~/desktop/dataSets/quality.csv", header = T, sep = ",")
head(ds)
str(ds)
na.omit(ds)
contrasts(ds)
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
# Convert all to numeric
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
head(dat)
str(dat)
getData <- function(data) {
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
getData <- function(data) {
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
}
# 2: Change
updateData <- function(data) { }
# 1: Get
getData <- function(data) {
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
}
# 2: Change
updateData <- function(data) {
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
}
# 3: Test
getData(ds)
updateData(da)
ds <- read.csv(file = "~/desktop/dataSets/quality.csv", header = T, sep = ",")
(str)
ls()
{}
)
getData <- function(data) {
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
}
updateData <- function(data) {
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
}
getData(ds)
updateData(da)
getData <- function(data) {
code <- ifelse(data == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
}
getData(ds)
ds <- read.csv(file = "~/desktop/dataSets/quality.csv", header = T, sep = ",")
head(ds)
str(ds)
na.omit(ds)
contrasts(ds)
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
code <- ifelse(d == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
dat <- ds
cols <- sapply(dat, is.logical)
dat[,cols] <- lapply(dat[,cols], as.numeric)
data <- ds
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
head(dat)
data[,cols] <- lapply(data[,cols], as.numeric)
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
head(dat)
str(data)
data[,cols] <- lapply(data[,cols], as.numeric)
head(dat)
data <- ds
cols <- sapply(data, is.logical)
head(data)
data[,cols] <- lapply(data[,cols], as.numeric)
head(data)
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
head(data)
data <- ds
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
head(data)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
updateData <- function(data) {
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
}
updateData(data)
updateData <- function(data) {
cols <- sapply(data, is.logical)
data[,cols] <- lapply(data[,cols], as.numeric)
data
}
updateData(data)
runApp('Desktop/MACHINE')
x <- getData(data)
x <- getData(data)
getData <- function(data) {
# code <- ifelse(data == target, 1, 0)
apply(ds,2,function(x) { all(na.omit(x) %in% 0:1) })
}
x <- getData(data)
x
names(x)
names(x == T)
names([x] == T)
names(x[1] == T)
data <- ds
x <- getData(data)
names(x[1] == T)
runApp('Desktop/MACHINE')
getData <- function(data) {
# code <- ifelse(data == target, 1, 0)
apply(data,2,function(x) { all(na.omit(x) %in% 0:1) })
}
x <- getData(data)
names(x)
data <- ds
apply(data,2,function(x) { all(na.omit(x) %in% 0:1) })
head(data)
names(x)
x
names(x)
Filter(isTRUE, x)
colnames(Filter(isTRUE, x))
names(Filter(isTRUE, x))
getData <- function(data) {
x <- apply(data,2,function(x) { all(na.omit(x) %in% 0:1) })
names(Filter(isTRUE, x))
}
x <- getData(data)
x
updateData(data)
data <- ds
getBinary <- function(data) {
x <- apply(data,2,function(x) { all(na.omit(x) %in% 0:1) })
names(Filter(isTRUE, x))
}
getBinary(data)
updateData(data)
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
runApp('Desktop/MACHINE')
shiny::runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
?write write.csv
?write.csv
wite.table(iris, file = "~/desktop/iris.csv", col.names =T)
write.table(iris, file = "~/desktop/iris.csv", col.names =T)
runApp('Desktop/machineLM')
write.table(iris, file = "~/desktop/iris.csv")
write.table(iris, file = "~/desktop/iris.csv")
runApp('Desktop/machineLM')
write.csv(iris, file = "~/desktop.iris.csv")
write.csv(iris, file = "~/desktop.iris.csv")
write.csv(iris, file = "~/desktop.iris.csv")
write.table(iris, file = "~/desktop/MyData.csv",row.names=FALSE, na="",col.names=FALSE, sep=",")
write.table(iris, file = "~/desktop/MyData.csv",row.names=FALSE, na="",col.names=T, sep=",")
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
install.packages("DT")
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
install.packages("canvasXpress")
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
plot(1:10)
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
data <- t(iris[,1:4])
data
data <- t(iris[,1:4])
data2 <- sapply(datasource(), is.numeric)
data2 <- sapply(iris, is.numeric)
data
data2
iris[data2]
data
data2
data2
data3 <- t(iris[data2])
data3
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
cols <- sapply(iris, is.logical)
data[,cols]
cols <- sapply(iris, is.numeric)
data[,cols]
cols <- sapply(iris, is.factor)
data[,cols]
cols <- sapply(iris, is.factor)
data[,cols]
cols <- sapply(iris, is.factor)
iris[,cols]
nums <- names(Filter(is.numeric, as.data.frame(iris) ))
nums <- names(Filter(is.numeric, as.data.frame(iris) ))
r <- vif(iris[nums])
r <- as.data.frame(r)
plot(r)
nums
nums <- names(Filter(is.numeric, as.data.frame(iris) ))
nums <- names(Filter(is.numeric, as.data.frame(iris) ))
factor <- names(Filter(is.factor, as.data.frame(iris) ))
logical <- names(Filter(is.logical, as.data.frame(iris) ))
nums
factor
logical
r <- c(factor, logical)
r
dependent[1]
nums <- names(Filter(is.numeric, as.data.frame(iris) ))
factor <- names(Filter(is.factor, as.data.frame(iris) ))
logical <- names(Filter(is.logical, as.data.frame(iris) ))
dependent <- c(factor, logical)
dependent[1]
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicModel')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
1!1
1!=1
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
