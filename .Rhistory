runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
data <- t(iris[,1:4])
data
data <- t(iris[,1:4])
data2 <- sapply(datasource(), is.numeric)
data2 <- sapply(iris, is.numeric)
data
data2
iris[data2]
data
data2
data2
data3 <- t(iris[data2])
data3
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
cols <- sapply(iris, is.logical)
data[,cols]
cols <- sapply(iris, is.numeric)
data[,cols]
cols <- sapply(iris, is.factor)
data[,cols]
cols <- sapply(iris, is.factor)
data[,cols]
cols <- sapply(iris, is.factor)
iris[,cols]
nums <- names(Filter(is.numeric, as.data.frame(iris) ))
nums <- names(Filter(is.numeric, as.data.frame(iris) ))
r <- vif(iris[nums])
r <- as.data.frame(r)
plot(r)
nums
nums <- names(Filter(is.numeric, as.data.frame(iris) ))
nums <- names(Filter(is.numeric, as.data.frame(iris) ))
factor <- names(Filter(is.factor, as.data.frame(iris) ))
logical <- names(Filter(is.logical, as.data.frame(iris) ))
nums
factor
logical
r <- c(factor, logical)
r
dependent[1]
nums <- names(Filter(is.numeric, as.data.frame(iris) ))
factor <- names(Filter(is.factor, as.data.frame(iris) ))
logical <- names(Filter(is.logical, as.data.frame(iris) ))
dependent <- c(factor, logical)
dependent[1]
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicModel')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/V/MODELS/dynamicStructure')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
1!1
1!=1
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
runApp('Desktop/machineLM')
shiny::runApp()
runApp()
library(usdm)
r <- vif(iris[nums])
r
runApp()
anova(lm1)
lm1
lm1
runApp()
runApp()
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp()
runApp()
runApp()
?gvlma
runApp()
library(gvlma)
lm1
lm
lm1 <- lm(Sepal.Length ~ Sepal.Width, data = iris)
lm1
gvlma.lm(model1)
gvlma.lm(mo1)
gvlma.lm(m1)
gvlma.lm(lm1)
z <- gvlma.lm(lm1)
z$vall
z$call
z$DirectionalStat4
z$DirectionalStat
str(z)
z$GlobalTest
z$GlobalStat4
runApp()
z$call
runApp()
z$call
z$Coefficients
z$LevelOfSignificance
z$GlobalTest
z$GlobalTest$GlobalStat4
z$GlobalTest$LevelOfSignificance
z$GlobalTest$GlobalStat4
z$GlobalTest$DirectionalStat4
z$GlobalTest$call
z$GlobalTest$DirectionalStat1
plot.z
?plot.gvlma
runApp()
runApp()
runApp()
runApp()
gvlma.lm(lm1)
data(CarMileageData)
CarModelAssess <- gvlma(NumGallons ~ MilesLastFill + NumDaysBetw,
data = CarMileageData)
plot(CarModelAssess)
par(mfrow=c(2,2))
plot(CarModelAssess, onepage = FALSE)
?plot.gvlma
runApp()
?summary
runApp()
aov(lm1)
a <- aov(lm1)
summary(a)
runApp()
install.packages("psych")
library(psych)
describe(iris)
runApp()
runApp()
runApp()
library(psych)
summary(lm)$coefficients
summary(lm)$coefficients[[1]]
summary(lm)$coefficients[1:4
}
summary(lm)$coefficients[1,4]
summary(lm)$coefficients[2,4]
summary(lm1)$coefficients
g <- gvlma.lm(lm1)
g
summary(g)$coefficients
summary(g)$coefficients[1]
summary(g)$coefficients[1,2]
summary(g)$coefficients[[1]]
summary(g)$
$
?gvlma.lm
summary(g)$GlobalStat4
summary(g)$LevelOfSignificance
s <- summary(g)
class(s)
str(s)
s$Value
s$Decision
s
s <- summary(g)
s
runApp()
g <- gvlma.lm(lm1)
lm1 <- lm(Sepal.Length ~ Sepal.Width, Petal.Width, data = iris)
g <- gvlma.lm(lm1)
s <- summary(g)
lm1 <- lm(Sepal.Length ~ Sepal.Width, Petal.Width, data = iris)
g <- gvlma.lm(lm1)
s <- summary(g)
lm1 <- lm(Sepal.Length ~ Petal.Length, Petal.Width, data = iris)
g <- gvlma.lm(lm1)
lm1 <- lm(Sepal.Length ~ Petal.Length, Petal.Width, data = iris)
g <- gvlma.lm(lm1)
lm1 <- lm(Sepal.Length ~ Petal.Length, Petal.Width, data = iris)
g <- gvlma.lm(lm1)
s <- summary(g)
class(s)
str(s)
s <- summary(g)
s
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lm1 <- lm(Sepal.Length ~ Petal.Length, Petal.Width, data = iris)
gvlma.lm(lm1)
lm1 <- lm(Sepal.Length ~ Petal.Length, Petal.Width, data = iris)
g <- gvlma.lm(lm1)
s <- summary(g)
lm1 <- lm(iris$Sepal.Length ~ iris$Petal.Length, iris$Petal.Width, data = iris)
g <- gvlma.lm(lm1)
s <- summary(g)
class(s)
str(s)
s <- summary(g)
s
g
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lm1 <- lm(iris$Sepal.Length ~ iris$Petal.Length, iris$Petal.Width, data = iris)
g <- gvlma.lm(lm1)
g
s <- summary(g)
s
runApp()
runApp()
runApp()
runApp()
runApp()
lm1 <- lm(iris$Sepal.Length ~ iris$Petal.Length, iris$Petal.Width, data = iris)
g <- gvlma.lm(lm1)
g
s <- summary(g)
s <- summary(g)
s
runApp()
runApp()
s
as.table(s)
xtab(s)
xtabs(s)
s
xtabs(s)
?xtabs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?pie
pie(rep(1, 24), col = rainbow(24), radius = 0.9)
pie(rep(1, 24), col = rainbow(24), radius = 0.9)
pie(c(75,25), col = rainbow(24), radius = 0.9)
2
pie(c(75,25), col = rainbow(2), radius = 0.9)
install.packages("plotrix")
runApp()
runApp()
runApp()
runApp()
runApp()
durbinWatsonTest(fit)
durbinWatsonTest(lm1)
runApp()
durbinWatsonTest(lm1)
db <- durbinWatsonTest(lm1)
summary(db)
runApp()
runApp()
runApp()
presstige
prestige
library(car)
prestige
library(car)
Prestige
write.table(Prestige, file = "~/desktop/prestige.csv", sep = ",")
runApp()
Prestige
str(Prestige)
runApp()
runApp('~/Desktop/Machine Learning/machineKNN')
runApp()
runApp()
runApp()
var <- 10
ppp <- paste("variable: ", var )
ppp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
anova(lm1)
aov(lm1)
runApp()
x1 <- rnorm(100, mean = 40, sd = 10)
x2 <- rnorm(100, mean = 45, sd = 15 )
x3 <- rnorm(100, mean = 50, sd = 20 )
x4 <- rnorm(100, mean = 55, sd = 10)
# Variance plot
boxplot(x1,x2,x3,x4, col = cm.colors(4))
# Buid data-frame
df1 <- data.frame(cbind(x1,x2,x3,x4))
# stacked
s1 <- stack(df1)
s1
# model 1
m1_anova <- aov(values ~ ind, data = s1)
m1_anova
summary(m1_anova)
# Tukey
TukeyHSD(m1_anova)
boxplot(x1,x2,x3,x4, col = cm.colors(4))
# Buid data-frame
df1 <- data.frame(cbind(x1,x2,x3,x4))
df1
s1
head(df1)
s1
runApp()
runApp()
runApp()
runApp()
runApp()
ibrary(glmnet)
library(glmnet)
testidx <- which(1:nrow(Prestige)%%4==0)
library(car)
testidx <- which(1:nrow(Prestige)%%4==0)
restige_train <- Prestige[-testidx,]
prestige_test <- Prestige[testidx,]
cv. t <- cv.glmnet(as.matrix(prestige_train[,c(-4, -6)]), as.vector(prestige_ train[,4]), nlambda=100, alpha=0.7, family=”gaussian”)
cv.t <- cv.glmnet(as.matrix(prestige_train[,c(-4, -6)]), as.vector(prestige_ train[,4]), nlambda=100, alpha=0.7, family=”gaussian”)
cv. t <- cv.glmnet(as.matrix(prestige_train[,c(-4, -6)]), as.vector(prestige_ train[,4]), nlambda=100, alpha=0.7, family=”gaussian”)
cv.t <- cv.glmnet(as.matrix(prestige_train[,c(-4, -6)]), as.vector(prestige_ train[,4]), nlambda=100, alpha=0.7, family=”gaussian”)
summary(Prestige)
testidx <- which(1:nrow(Prestige)%%4==0)
prestige_train <- Prestige[-testidx,]
prestige_test <- Prestige[testidx,]
cv.t <- cv.glmnet(as.matrix(prestige_train[,c(-4, -6)]), as.vector(prestige_ train[,4]), nlambda=100, alpha=0.7, family="gaussian")
library(glmnet)
cv.t <- cv.glmnet(as.matrix(prestige_train[,c(-4, -6)]), as.vector(prestige_train[,4]), nlambda=100, alpha=0.7, family="gaussian")
plot(cv.t)
coef(cv.t)
prestige_train[,c(-4, -6)]
prestige_train[,1]
prestige_train[,3]
prestige_train[,4]
prestige_train[,c(-4, -6)]
shiny::runApp()
runApp('~/Desktop/Machine Learning/machineKNN')
source('~/Desktop/Untitled.R')
source('~/Desktop/Untitled.R')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/V/machineKNN 2')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/V/machineKNN 2')
runApp('~/Desktop/V/machineKNN 2')
runApp('~/Desktop/V/machineKNN 2')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
sampleLm <- replicate(100, lm(child ~ parent, data = galton,
subset = sample(seq(nrow(galton)), size = 50)),
simplify = FALSE)
sampleLm
sampleLm$formula
summary(sampleLm)$formula
summary(sampleLm)$
$
s <- summary(sampleLm)
str(s)
s$mode
reformulate("x*w", ff[[2]])
reformulate(termlabels, response = NULL, intercept = TRUE)
reformulate("x*w", ff[[2]])
fS <- surv(ft, case) ~ a + b
reformulate(c("a", "b*f"), fS[[2]])
asOneSidedFormula(~ age)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("textreg")
lm1
results <- paste(capture.output(texreg(lm1)), collapse="\n")
print(x"")
print("x")
print(withMathJax("$$\\text{Display formula in heading }X_n=X_{n-1}-\\varepsilon$$")
""
withMathJax("$$\\text{Display formula in heading }X_n=X_{n-1}-\\varepsilon$$"
)
withMathJax("$$\\text{Display formula in heading }X_n=X_{n-1}-\\varepsilon$$")
shiny::runApp()
runApp()
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop/Machine Learning/machineKNN')
runApp('~/Desktop/Machine Learning/machineKNN')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("caTools")
runApp()
install.packages("ROCR")
install.packages("corrplot")
install.packages("effects")
install.packages("DT")
install.packages("canvasXpress")
install.packages("gvlma")
install.packages("car")
install.packages("car")
install.packages("usdm")
install.packages("plotrix")
runApp()
install.packages("psych")
runApp()
